import time

from klotski import klotski99
from klotski import klotski99_sllm
import unittest


class TestKlotski99Dev(unittest.TestCase):

    def common_method_sllm(self, numbers):
        expect_result = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                         26, 27,
                         28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
                         52, 53,
                         54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
                         78, 79, 80,
                         0]

        start_time = time.time()

        # 将一维数组转换为二维数组
        numbers_2d = [numbers[i:i + 9] for i in range(0, len(numbers), 9)]
        expect_result_2d = [expect_result[i:i + 9] for i in range(0, len(expect_result), 9)]

        steps = klotski99_sllm.get_path(numbers_2d, expect_result_2d)
        end_time = time.time()

        print(f"耗时{end_time - start_time}秒")
        print(len(steps))
        print(steps)

        print("打印移动")
        current_state = numbers
        for path in steps:
            index = path[0] * 9 + path[1]
            zero_index = current_state.index(0)
            current_state[zero_index] = current_state[index]
            current_state[index] = 0
        print(current_state)

        self.assertEqual(current_state, expect_result)

    def test_sllm(self):
        numbers = [13, 20, 60, 46, 38, 71, 14, 21, 17, 1, 47, 8, 69, 65, 70, 73, 50, 51, 3, 10, 58, 35, 55, 76, 77, 59,
                   80, 26, 36, 6, 27, 24, 54, 31, 43, 62, 25, 34, 66, 61, 67, 30, 5, 11, 7, 15, 56, 29, 4, 78, 44, 16,
                   74, 63, 19, 45, 79, 68, 64, 33, 12, 9, 40, 2, 18, 39, 53, 41, 72, 0, 57, 37, 48, 28, 75, 42, 52, 49,
                   22, 23, 32]

        self.common_method_sllm(numbers)

    def common_method(self, numbers):
        start_time = time.time()
        steps = klotski99_sllm.get_path_warp(numbers)
        end_time = time.time()

        print(f"耗时{end_time - start_time}秒")
        print(len(steps))
        print(steps)

        print("打印移动")
        current_state = numbers
        for path in steps:
            index = path
            zero_index = current_state.index(99)
            current_state[zero_index] = current_state[index]
            current_state[index] = 99
        print(current_state)

        expect_result = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                         26, 27,
                         28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
                         52, 53,
                         54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
                         78, 79,
                         99]

        self.assertEqual(current_state, expect_result)

    def test1(self):
        # 耗时14.006702899932861秒
        # 418
        # 耗时53.21908187866211秒
        # 468
        # 耗时9.201730012893677秒
        # 366
        # 耗时2.20169997215271秒
        # 404
        numbers = [0, 1, 2, 3, 5, 7, 25, 16, 8, 9, 10, 11, 99, 39, 14, 26, 15, 17, 18, 20, 21, 4, 12, 6, 32, 24, 35, 28,
                   19, 49,
                   30, 31, 40, 13, 34, 44, 45, 36, 29, 41, 22, 33, 23, 43, 53, 27, 72, 38, 56, 50, 68, 42, 51, 62, 37,
                   54, 48,
                   47, 55, 67, 61, 69, 79, 46, 64, 65, 66, 59, 57, 58, 71, 52, 73, 63, 75, 76, 74, 78, 77, 60, 70]
        self.common_method(numbers)

    def test2(self):
        # 耗时5.188451051712036秒
        # 393
        # 耗时44.173370122909546秒
        # 633
        # 耗时5.275058031082153秒
        # 393
        # 耗时3.1176133155822754秒
        # 475
        numbers = [10, 0, 11, 2, 3, 13, 6, 7, 8, 1, 28, 20, 12, 5, 4, 16, 17, 26, 19, 9, 39, 21, 38, 14, 25, 35, 33, 18, 29, 49, 30, 23, 31, 50, 32, 15, 27, 37, 36, 41, 24, 44, 40, 53, 34, 45, 56, 47, 42, 22, 51, 43, 60, 61, 54, 46, 55, 58, 48, 59, 52, 99, 62, 72, 64, 66, 57, 67, 77, 68, 79, 70, 65, 63, 73, 74, 75, 76, 69, 78, 71]
        self.common_method(numbers)

    def test3(self):
        # 耗时2.5149991512298584秒
        # 345
        # 耗时4.0920891761779785秒
        # 237
        # 耗时5.816228628158569秒
        # 359
        numbers = [0, 1, 2, 3, 14, 5, 6, 15, 8, 9, 10, 11, 4, 31, 7, 33, 13, 26, 18, 19, 21, 12, 30, 23, 35, 16, 24, 27, 28, 20, 29, 40, 22, 25, 34, 17, 36, 37, 39, 48, 49, 32, 50, 52, 42, 45, 46, 38, 67, 41, 57, 59, 53, 43, 54, 55, 47, 99, 68, 58, 70, 44, 61, 63, 64, 56, 66, 60, 69, 78, 51, 62, 72, 73, 65, 75, 74, 76, 77, 79, 71]
        self.common_method(numbers)

    def test4(self):
        # 耗时11.898004055023193秒
        # 488
        # 耗时4.508171796798706秒
        # 302
        # 耗时6.510473012924194秒
        # 430
        numbers = [0, 12, 1, 2, 3, 14, 6, 7, 8, 20, 36, 21, 11, 5, 4, 15, 16, 17, 9, 29, 10, 13, 22, 23, 24, 25, 26, 19, 18, 37, 30, 31, 32, 33, 35, 44, 27, 47, 28, 57, 39, 41, 42, 34, 53, 45, 46, 38, 56, 64, 50, 52, 43, 62, 63, 54, 72, 67, 66, 59, 51, 61, 70, 75, 48, 65, 74, 58, 40, 68, 78, 79, 99, 55, 49, 73, 76, 77, 60, 69, 71]
        self.common_method(numbers)

    def test5(self):
        # ka 30
        # 耗时13.30239987373352秒
        # 362
        # 耗时4.150820970535278秒
        # 360
        numbers = [0, 11, 20, 1, 4, 2, 17, 7, 26, 9, 37, 3, 99, 13, 15, 16, 5, 24, 12, 28, 10, 30, 22, 14, 33, 8, 25, 19, 21, 27, 39, 31, 23, 34, 6, 35, 36, 18, 29, 38, 40, 32, 41, 43, 44, 45, 46, 56, 47, 49, 50, 42, 52, 53, 54, 55, 66, 57, 77, 58, 59, 60, 62, 72, 64, 48, 65, 74, 67, 51, 61, 71, 73, 63, 75, 68, 76, 78, 69, 70, 79]
        self.common_method(numbers)

    def test6(self):
        # 耗时7.210335969924927秒
        # 481
        # 耗时4.445328950881958秒
        # 423
        # 耗时1.768681287765503秒
        # 441
        numbers = [0, 2, 3, 4, 23, 15, 5, 6, 8, 9, 1, 10, 22, 12, 13, 24, 7, 17, 18, 21, 11, 30, 31, 14, 25, 16, 34, 27, 19, 20, 40, 52, 41, 32, 35, 33, 28, 37, 29, 38, 66, 50, 42, 99, 26, 45, 36, 46, 39, 58, 49, 62, 43, 44, 54, 56, 57, 65, 59, 78, 70, 51, 53, 72, 55, 73, 47, 74, 77, 69, 61, 60, 64, 63, 67, 76, 75, 48, 68, 79, 71]
        self.common_method(numbers)

    def test7(self):
        # 耗时4.271245002746582秒
        # 571
        # 耗时26.196744918823242秒
        # 457
        # 耗时8.311420202255249秒
        # 493
        numbers = [9, 0, 3, 13, 7, 1, 15, 14, 6, 18, 11, 26, 12, 2, 32, 35, 5, 8, 27, 10, 19, 29, 4, 21, 23, 17, 16, 36, 37, 30, 22, 41, 31, 25, 24, 34, 48, 45, 20, 39, 49, 50, 33, 43, 44, 46, 28, 56, 47, 57, 58, 42, 51, 53, 38, 72, 65, 66, 59, 40, 69, 52, 61, 55, 73, 74, 75, 67, 77, 68, 71, 62, 54, 99, 63, 64, 76, 78, 60, 70, 79]
        self.common_method(numbers)

    def test8(self):
        # 无解 49
        # 耗时9.723086833953857秒
        # 395
        # 耗时5.592011213302612秒
        # 351
        numbers = [1, 11, 2, 5, 13, 6, 16, 17, 25, 28, 0, 10, 3, 12, 7, 23, 8, 35, 18, 19, 29, 20, 21, 30, 14, 26, 34, 36, 38, 37, 4, 40, 24, 44, 31, 15, 9, 27, 47, 48, 39, 32, 33, 43, 53, 45, 56, 55, 58, 49, 22, 51, 41, 52, 54, 64, 46, 57, 67, 50, 60, 42, 70, 63, 73, 66, 59, 68, 69, 99, 62, 61, 72, 74, 65, 75, 76, 77, 78, 79, 71]
        self.common_method(numbers)

    def test9(self):
        # 无解 49
        # 耗时12.119026899337769秒
        # 394
        # 耗时2.391648769378662秒
        # 470
        numbers = [2, 11, 9, 3, 13, 4, 5, 7, 8, 1, 10, 0, 12, 23, 24, 15, 26, 16, 99, 18, 38, 20, 29, 14, 6, 25, 34, 27, 19, 47, 21, 30, 31, 52, 35, 17, 36, 37, 28, 39, 22, 40, 32, 33, 53, 45, 57, 55, 56, 41, 43, 71, 50, 44, 64, 46, 74, 48, 49, 61, 60, 62, 51, 54, 65, 66, 67, 59, 58, 77, 69, 79, 63, 72, 73, 75, 76, 78, 68, 42, 70]
        self.common_method(numbers)

    def test10(self):
        # 无解 27
        # 耗时24.368372917175293秒
        # 399
        # 耗时0.8142335414886475秒
        # 383
        numbers = [9, 0, 1, 2, 3, 5, 16, 6, 8, 18, 10, 12, 21, 4, 13, 7, 25, 17, 27, 20, 11, 22, 23, 31, 24, 15, 26, 37, 19, 50, 56, 14, 33, 99, 51, 35, 36, 29, 41, 32, 49, 40, 34, 42, 44, 45, 28, 38, 30, 67, 52, 60, 43, 53, 54, 57, 47, 55, 39, 62, 68, 59, 61, 64, 46, 65, 48, 58, 76, 69, 71, 78, 63, 72, 73, 66, 74, 75, 77, 79, 70]
        self.common_method(numbers)

    def test11(self):
        # 无解 31
        # 耗时15.353205919265747秒
        # 325
        # 耗时1.503281831741333秒
        # 389
        numbers = [9, 0, 11, 14, 4, 13, 6, 8, 16, 2, 10, 1, 12, 3, 15, 5, 26, 7, 18, 99, 19, 29, 23, 32, 22, 24, 25, 28, 21, 20, 30, 31, 33, 43, 51, 44, 27, 45, 38, 39, 41, 42, 50, 35, 61, 37, 36, 55, 47, 48, 49, 60, 17, 62, 63, 54, 46, 58, 40, 59, 52, 34, 53, 64, 65, 56, 57, 67, 68, 70, 71, 79, 72, 73, 74, 66, 75, 76, 77, 69, 78]
        self.common_method(numbers)

    def test12(self):
        # 耗时14.46337080001831秒
        # 547
        # 耗时13.601583003997803秒
        # 329
        # 耗时3.5659849643707275秒
        # 353
        numbers = [21, 20, 1, 2, 3, 4, 5, 7, 8, 9, 0, 40, 18, 12, 14, 16, 25, 17, 19, 11, 10, 29, 6, 22, 23, 15, 35, 28, 36, 31, 39, 13, 24, 42, 43, 33, 45, 27, 37, 48, 30, 58, 34, 26, 44, 54, 46, 38, 57, 51, 41, 32, 52, 53, 55, 56, 47, 99, 50, 49, 60, 61, 62, 63, 64, 65, 66, 67, 59, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 71]
        self.common_method(numbers)

    def test13(self):
        # 28
        # 耗时1.9267125129699707秒
        # 487
        numbers = [10, 20, 1, 9, 12, 4, 14, 5, 8, 18, 21, 99, 27, 2, 25, 23, 6, 7, 0, 19, 13, 3, 50, 16, 15, 34, 17, 28, 30, 11, 29, 22, 33, 32, 24, 26, 36, 37, 38, 39, 40, 31, 35, 42, 44, 45, 46, 47, 57, 49, 58, 69, 43, 53, 55, 63, 65, 56, 48, 41, 52, 51, 62, 54, 64, 74, 66, 59, 68, 60, 70, 61, 72, 73, 75, 76, 67, 77, 78, 79, 71]

        # 19 29
        # numbers = [0, 1, 22, 2, 4, 6, 24, 15, 16, 10, 20, 99, 3, 12, 13, 8, 26, 7, 18, 9, 11, 21, 40, 31, 5, 50, 17, 27, 28, 29, 39, 30, 32, 34, 33, 35, 37, 19, 46, 49, 41, 23, 14, 42, 44, 64, 38, 47, 48, 66, 51, 25, 43, 52, 36, 55, 57, 58, 59, 61, 60, 71, 53, 45, 54, 56, 65, 68, 76, 78, 70, 62, 72, 63, 73, 74, 75, 67, 77, 69, 79]
        # 耗时1.7420094013214111秒
        # 507

        # 耗时1.582129955291748秒
        # 386
        numbers = [99, 0, 1, 2, 14, 3, 5, 15, 6, 9, 20, 11, 12, 13, 16, 26, 17, 8, 27, 10, 19, 21, 23, 4, 7, 25, 35, 37, 18, 29, 31, 22, 32, 42, 33, 61, 28, 38, 47, 30, 40, 50, 41, 44, 24, 72, 45, 48, 49, 57, 52, 43, 34, 53, 54, 56, 55, 66, 39, 59, 51, 68, 69, 36, 64, 63, 75, 58, 67, 77, 79, 62, 46, 73, 65, 74, 76, 60, 78, 70, 71]

        # 倒数3层速度也需要优化
        # 耗时9.661676406860352秒
        # 541
        numbers = [0, 1, 2, 29, 4, 13, 6, 8, 17, 9, 10, 11, 20, 12, 25, 24, 16, 7, 18, 28, 19, 39, 3, 22, 15, 26, 44, 38, 37, 50, 31, 99, 40, 34, 14, 35, 36, 27, 48, 32, 49, 5, 51, 52, 43, 46, 45, 30, 21, 47, 42, 33, 60, 53, 54, 65, 55, 56, 23, 41, 59, 70, 61, 64, 72, 57, 66, 58, 76, 78, 71, 69, 63, 73, 74, 75, 77, 68, 67, 79, 62]

        # 耗时1.6717591285705566秒
        # 492
        numbers = [0, 2, 3, 5, 12, 6, 15, 7, 8, 1, 11, 28, 4, 13, 24, 26, 25, 17, 18, 27, 99, 22, 20, 40, 14, 16, 35, 36, 46, 37, 10, 19, 30, 32, 23, 34, 54, 63, 55, 38, 31, 33, 42, 43, 44, 9, 45, 21, 29, 39, 59, 52, 41, 53, 47, 64, 56, 57, 48, 49, 69, 50, 70, 72, 66, 74, 67, 58, 68, 79, 61, 51, 73, 65, 75, 76, 77, 78, 60, 71, 62]
        self.common_method(numbers)